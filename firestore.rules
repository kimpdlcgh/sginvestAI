rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.email.matches('.*admin.*') || 
         request.auth.token.email.matches('.*support.*'));
    }

    // User profiles - users can only access their own profile
    match /profiles/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin(); // Admins can read all profiles
    }

    // Portfolio holdings - users can only access their own holdings
    match /portfolioHoldings/{holdingId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can read all holdings
    }

    // Trades - users can only access their own trades
    match /trades/{tradeId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin(); // Admins can manage all trades
    }

    // Wallets - users can only access their own wallet
    match /wallets/{userId} {
      allow read: if isOwner(userId);
      allow read, write: if isAdmin(); // Admins can manage all wallets
    }

    // Wallet transactions - users can only see their own transactions
    match /walletTransactions/{transactionId} {
      allow read: if isAuthenticated() && 
        resource.data.walletId == request.auth.uid;
      allow read, write: if isAdmin(); // Admins can manage all transactions
      allow create: if isAdmin(); // Only admins can create transactions
    }

    // Funding requests - users can create and view their own, admins can manage all
    match /fundingRequests/{requestId} {
      allow read, create: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         request.resource.data.userId == request.auth.uid);
      allow read, write: if isAdmin(); // Admins can manage all funding requests
    }

    // Watchlists - users can only access their own watchlists
    match /watchlists/{watchlistId} {
      allow read, write: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // Admin orders - users can read their own, admins can manage all
    match /adminOrders/{orderId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
      allow create: if isAdmin();
    }

    // Assets - public read access for market data
    match /assets/{assetId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can update asset data
    }

    // Market data - public read access
    match /marketData/{symbol} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can update market data
    }

    // Default deny for any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}